
.form-group {
   padding: ($spacer-y * 0.5) 0;
   &.from-group-c2a {
      margin-top: 2rem;
   }
}

.form-control {
   font-family: $font-family-sans-serif;
   font-weight: 400;
   font-size: 100%;
   color: $gray;

   box-shadow: none;
   @include bg-color($gray-lightest);
   @include border-color($gray-lighter);

   @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

   // Make inputs at least the height of their button counterpart (base line-height + padding + border).
   // Only apply the height to textual inputs and some selects.
   /*
      &:not(textarea),
      &:not(select[size]),
      &:not(select[multiple]) {
         height: $input-height;
   }
   */

   // Customize the `:focus` state to imitate native WebKit styles.
   @include form-control-focus();

   &:focus {
      color: $gray-dark;
      border-color: $brand-primary;
      @include bg-color($white);
      box-shadow: inset 0 0 0 rgba(0,0,0,.1);
   }

   // Placeholder
   &::placeholder {
      @include type-color($gray, 0.25);
   }

   &:disabled,
   &[readonly] {

   }

   &:disabled {

   }
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {

}

//
// Labels
//
.col-form-label {
   font-family: $font-family-sans-serif;
   font-weight: 400;
   white-space: nowrap;
   text-overflow: ellipsis;
   overflow: hidden;
   font-size: 100%;
   &.col-form-label-lg {
      font-size: 110%;
   }
   &.required {
      font-weight: 600;
      &:before {
         content: '* ';
      }
   }
}

.form-text,
.help-text {
   font-family: $font-family-sans-serif;
   font-style: italic;

}

// Static form control text
//
// Apply class to an element to make any string of text align with labels in a
// horizontal form layout.
.form-control-static {
   &.form-control-sm,
   &.form-control-lg {

   }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.
.form-control-sm {
   font-size: 90%;
   padding: .6rem .9rem;
}

.form-control-lg {
   font-size: 110%;
   padding: .75rem 1rem;
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.
.form-group {

}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.radio,
.checkbox {
   label {
    // When there's no labels, don't position the input.
      input:only-child {

      }
   }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {

}

.radio + .radio,
.checkbox + .checkbox {

}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {

}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {

}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
   &:disabled,
   &.disabled {

   }
}
// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
   &.disabled {

   }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
   &.disabled {
      label {

      }
   }
}

// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.
.form-control-success,
.form-control-warning,
.form-control-danger {
   background-image: none;
}

.has-success,
.has-warning,
.has-danger {
   > div[class^="col-"],
   > div[class*=" col-"] {
      position: relative;
      &:after {
         @include entypo(' ');
         position: absolute;
         height: 1rem;
         margin: -0.5rem;
         top: ($input-height * 0.5);
         right: ($input-height * 0.75);
      }
   }
   > .col-form-label-lg + div[class^="col-"],
   > .col-form-label-lg + div[class*=" col-"] {
      &:after {
         position: absolute;
         top: ($input-height-lg * 0.5);
         right: ($input-height-lg * 0.75);
      }
   }
}

// Form validation states
.has-success {
   .col-form-label {
      color: $brand-success;
      + div[class^="col-"]:after,
      + div[class*=" col-"]:after {
         content: $form-icon-success;
         color: $form-icon-success-color;
      }
   }
   .form-control-success:before {

   }
}

.has-warning {
   .col-form-label {
      color: $brand-warning;
      + div[class^="col-"]:after,
      + div[class*=" col-"]:after {
         content: $form-icon-warning;
         color: $form-icon-warning-color;
      }
   }
   .form-control-warning {

   }
}

.has-danger {
   .col-form-label {
      color: $brand-danger;
      + div[class^="col-"]:after,
      + div[class*=" col-"]:after {
         content: $form-icon-danger;
         color: $form-icon-danger-color;
      }
   }
   .form-control-danger {

   }
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
.form-inline {

   // Kick in the inline
   @include media-breakpoint-up(sm) {
    // Inline-block all the things for "inline"
      .form-group {

      }

      // Allow folks to *not* use `.form-group`
      .form-control {

      }

      // Make static controls behave like regular ones
      .form-control-static {

      }

      .input-group {
         .input-group-addon,
         .input-group-btn,
         .form-control {

         }
      }


      .input-group > .form-control {

      }

      .form-control-label {

      }

      // Remove default margin on radios/checkboxes that were used for stacking, and
      // then undo the floating of radios and checkboxes to match.
      .radio,
      .checkbox {
         label {

         }
      }
      .radio input[type="radio"],
      .checkbox input[type="checkbox"] {

      }
      // Re-override the feedback icon.
      .has-feedback .form-control-feedback {

      }
   }
}

.nopo-skin-invers {
// namespace

fieldset {
   &.actions {
      padding: 1rem 0;
   }
}

.form-control {
   font-family: $font-family-sans-serif;
   font-weight: 400;
   font-size: 100%;
   color: $gray-light;

   box-shadow: inset 0 1px 15px rgba(0,0,0,.2);
   @include bg-color($gray-darker, 0.25);
   @include border-color($gray);

   @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

   // Make inputs at least the height of their button counterpart (base line-height + padding + border).
   // Only apply the height to textual inputs and some selects.
   /*
      &:not(textarea),
      &:not(select[size]),
      &:not(select[multiple]) {
         height: $input-height;
   }
   */

   // Customize the `:focus` state to imitate native WebKit styles.
   @include form-control-focus();

   &:focus {
      color: $gray-lighter;
      border-color: $gray-lighter;
      @include bg-color($gray-darker, 0.5);
      box-shadow: inset 0 0 0 rgba(0,0,0,.15);
   }

   // Placeholder
   &::placeholder {
      @include type-color ($gray, 0.25);
   }

   &:disabled,
   &[readonly] {

   }

   &:disabled {

   }
}

// ende :: namespace
}

// scss-lint:disable PropertyCount

// Embedded icons from Open Iconic.
// Released under MIT and copyright 2014 Waybury.
// https://useiconic.com/open


// Checkboxes and radios
//
// Base class takes care of all the key behavioral aspects.

.custom-control {
   position: relative;
   display: inline-block;
   padding-left: $custom-control-gutter;
   cursor: pointer;

   + .custom-control {
      margin-left: $custom-control-spacer-x;
   }
}

.custom-control-input {
   position: absolute;
   z-index: -1; // Put the input behind the label so it doesn't overlay text
   opacity: 0;

   &:checked ~ .custom-control-indicator {
      color: $custom-control-checked-indicator-color;
      background-color: $custom-control-checked-indicator-bg;
      @include box-shadow($custom-control-checked-indicator-box-shadow);
   }

   &:focus ~ .custom-control-indicator {
      // the mixin is not used here to make sure there is feedback
      box-shadow: $custom-control-focus-indicator-box-shadow;
   }

   &:active ~ .custom-control-indicator {
      color: $custom-control-active-indicator-color;
      background-color: $custom-control-active-indicator-bg;
      @include box-shadow($custom-control-active-indicator-box-shadow);
   }

   &:disabled {
      ~ .custom-control-indicator {
         cursor: $custom-control-disabled-cursor;
         background-color: $custom-control-disabled-indicator-bg;
      }
      ~ .custom-control-description {
         color: $custom-control-disabled-description-color;
         cursor: $custom-control-disabled-cursor;
      }
   }
}

// Custom indicator
//
// Generates a shadow element to create our makeshift checkbox/radio background.

.custom-control-indicator {
   position: absolute;
   top: .25rem;
   left: 0;
   display: block;
   text-align: center;
   width: $custom-control-indicator-size;
   height: $custom-control-indicator-size;
   pointer-events: none;
   user-select: none;
   background-color: $custom-control-indicator-bg;
   @include box-shadow($custom-control-indicator-box-shadow);
}

// Checkboxes
//
// Tweak just a few things for checkboxes.

.custom-checkbox {
   .custom-control-indicator {
      @include border-radius($custom-checkbox-radius);
   }
   .custom-control-input:checked ~ .custom-control-indicator {
      &:before {
         @include entypo($custom-checkbox-checked-icon, $custom-control-checked-indicator-color); // check
      }
   }

   .custom-control-input:indeterminate ~ .custom-control-indicator {
      background-color: $custom-checkbox-indeterminate-bg;
      @include box-shadow($custom-checkbox-indeterminate-box-shadow);
      &:before {
         @include entypo($custom-checkbox-indeterminate-icon, $custom-checkbox-indeterminate-indicator-color); // minus
      }
   }
}

// Radios
//
// Tweak just a few things for radios.
.custom-radio {
   .custom-control-indicator {
      border-radius: $custom-radio-radius;
   }
   .custom-control-input:checked ~ .custom-control-indicator {
      text-align: center;
      vertical-align: middle;
      &:before {
         @include entypo($custom-radio-checked-icon, $custom-control-checked-indicator-color); // dot
         font-size: 140%;
      }
   }
}


// Layout options
//
// By default radios and checkboxes are `inline-block` with no additional spacing
// set. Use these optional classes to tweak the layout.

.custom-controls-stacked {
   .custom-control {
      float: left;
      clear: left;

      + .custom-control {
         margin-left: 0;
      }
   }
}


// Select
//
// Replaces the browser default select with a custom one, mostly pulled from
// http://primercss.io.
//
// Includes IE9-specific hacks (noted by ` \9`).

.custom-select {
   display: inline-block;
   max-width: 100%;
   $select-border-width: ($border-width * 2);
   height: calc(#{$input-height} - #{$select-border-width});
   padding: $custom-select-padding-y ($custom-select-padding-x + $custom-select-indicator-padding) $custom-select-padding-y $custom-select-padding-x;
   padding-right: $custom-select-padding-x \9;
   color: $custom-select-color;
   vertical-align: middle;
   background: $custom-select-bg $custom-select-indicator no-repeat right $custom-select-padding-x center;
   background-image: none \9;
   background-size: $custom-select-bg-size;
   border: $custom-select-border-width solid $custom-select-border-color;
   @include border-radius($custom-select-border-radius);
   // Use vendor prefixes as `appearance` isn't part of the CSS spec.
   -moz-appearance: none;
   -webkit-appearance: none;

   &:focus {
      border-color: $custom-select-focus-border-color;
      outline: none;
      @include box-shadow($custom-select-focus-box-shadow);

      &::-ms-value {
         // For visual consistency with other platforms/browsers,
         // supress the default white text on blue background highlight given to
         // the selected option text when the (still closed) <select> receives focus
         // in IE and (under certain conditions) Edge.
         // See https://github.com/twbs/bootstrap/issues/19398.
         color: $input-color;
         background-color: $input-bg;
      }
   }

   &:disabled {
      color: $custom-select-disabled-color;
      cursor: $cursor-disabled;
      background-color: $custom-select-disabled-bg;
   }

   // Hides the default caret in IE11
   &::-ms-expand {
      opacity: 0;
   }
}

.custom-select-sm {
   padding-top: $custom-select-padding-y;
   padding-bottom: $custom-select-padding-y;
   font-size: $custom-select-sm-font-size;

   // &:not([multiple]) {
   //   height: 26px;
   //   min-height: 26px;
   // }
}


// File
//
// Custom file input.

.custom-file {
   position: relative;
   display: inline-block;
   max-width: 100%;
   height: $custom-file-height;
   cursor: pointer;
}

.custom-file-input {
   min-width: $custom-file-width;
   max-width: 100%;
   margin: 0;
   filter: alpha(opacity = 0);
   opacity: 0;

   &:focus ~ .custom-file-control {
      @include box-shadow($custom-file-focus-box-shadow);
   }
}

.custom-file-control {
   position: absolute;
   top: 0;
   right: 0;
   left: 0;
   z-index: 5;
   height: $custom-file-height;
   padding: $custom-file-padding-x $custom-file-padding-y;
   line-height: $custom-file-line-height;
   color: $custom-file-color;
   user-select: none;
   background-color: $custom-file-bg;
   border: $custom-file-border-width solid $custom-file-border-color;
   @include border-radius($custom-file-border-radius);
   @include box-shadow($custom-file-box-shadow);

   @each $lang, $text in map-get($custom-file-text, placeholder) {
      &:lang(#{$lang})::after {
         content: $text;
      }
   }

   &::before {
      position: absolute;
      top: -$custom-file-border-width;
      right: -$custom-file-border-width;
      bottom: -$custom-file-border-width;
      z-index: 6;
      display: block;
      height: $custom-file-height;
      padding: $custom-file-padding-x $custom-file-padding-y;
      line-height: $custom-file-line-height;
      color: $custom-file-button-color;
      background-color: $custom-file-button-bg;
      border: $custom-file-border-width solid $custom-file-border-color;
      @include border-radius(0 $custom-file-border-radius $custom-file-border-radius 0);
   }

   @each $lang, $text in map-get($custom-file-text, button-label) {
      &:lang(#{$lang})::before {
         content: $text;
      }
   }
}

// Checkboxes and radios
//
// Base class takes care of all the key behavioral aspects.
.nopo-skin {
   &.custom-control {
      + .custom-control {

      }
   }

   // Custom indicator
   //
   // Generates a shadow element to create our makeshift checkbox/radio background.
   .custom-control-indicator {
      top: 0.15rem;
      border: 1px solid $gray;
      @include bg-color($gray-lightest);
      @include border-color($gray-lighter);
   }

   .custom-control-input {

      &:checked ~ .custom-control-indicator {
         @include border-color($brand-primary);
         @include bg-color($brand-primary);
      }

      &:focus ~ .custom-control-indicator {
        // the mixin is not used here to make sure there is feedback
      }

      &:active ~ .custom-control-indicator {
        @include border-color($brand-primary);
        @include bg-color($brand-primary, 0.75);
        box-shadow: inset 0 0 0 rgba(0,0,0,.1);
      }
   }

   .custom-control-description {
      display: inline-block;
      font-family: $font-family-sans-serif;
      font-weight: 400;
      color: $gray-light;
      padding-left: ($custom-control-gutter * .25);
   }

   & {
      .custom-control-indicator {
         top: 0;
      }

      .custom-control-description {
         height: $custom-control-indicator-size;
         font-size: 115%;
         padding-left: ($custom-control-gutter * .5);
      }
   }
}
