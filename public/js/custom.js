/*! * @name			app.js * * @client			CLIENT NAME * @description	Main frontend application w/ UI features for responsive websites * @libs			   jquery, gsap, bootstrap * @copyright 		(c) 2016 Ansgar Hiller (www.weigelstein.de)*/// breakpoints must match @screen-{xs,sm,md,lg}-min defined in "variables.less"// (skin/frontend/inseleintracht/default/css/_less/inei/variables.less)// where a max-width is used, remember to {ws.bp} - 1 to break correctlyvar BP = {		xs: 0,		sm: 544,		md: 768,		lg: 992,		xl: 1200	};// 	must match @grid-float-breakpoint defined in "_variables.scss"var	GRID_FLOAT_BREAKPOINT = BP.sm;// vars viewportvar w,h,	viewportSize;// namespacevar APP = APP || {},	 WS = WS  || {};// 	frameworksvar TweenMax,	Modernizr,	PointerManager,	Waypoint,	enquire;if (typeof Modernizr === 'object') {	Modernizr.addTest('ios', function () {		'use strict';		return navigator.userAgent.match(/(iPad|iPhone|iPod)/g);	});	iOS 		 = (Modernizr.ios);	svg 		 = (Modernizr.svg);	isIphone  	 = (/iphone/gi).test(navigator.appVersion);	isIpad 	 	 = (/ipad/gi).test(navigator.appVersion);	isAndroid 	 = (/android/gi).test(navigator.appVersion);}// set on runtimepointer 	 			= false; // 'touch', 'mouse' or 'pointer'isFrontpage 			= false;smallScreenBehavior 	= false;scrollTop 				= 0;lastScrollTop 			= 0;jQuery(document).ready(function ($) { 'use strict';	// DOM-ELEMENTS	var BODY 	= $('body'),		HTML 	= $('html'),		PAGE	= $('#page'),		HEADER	= $('#header'),		MAIN 	= $('#main'),		FOOTER 	= $('#footer');	BODY.removeClass('no-js'); // obviously	if (typeof PointerManager === 'object') {		PointerManager.init();		$(window).on('mouse-detected touch-detected', function() {			pointer = PointerManager.getPointer();			BODY.addClass(pointer);			console.log(pointer);		});	}	APP = {		ready: false,		/**		 * Determines if small screen behavior should be used.		 *		 * @returns {boolean}		 */		useSmallScreenBehavior: function() {			return Modernizr.mq("screen and (max-width:" + (GRID_FLOAT_BREAKPOINT - 1) + "px)");		},		/**         * Caches element sizes for reuse         */        cacheSizes: function(){			w = Waypoint.viewportWidth();			h = Waypoint.viewportHeight();			smallScreenBehavior = APP.useSmallScreenBehavior();			scrollTop = $(window).scrollTop();        },        getWindowHeight: function(_h) {			this.cacheSizes();            if (_h){                return h + _h;            } else {                return h;            }        },        init: function() {			$(window).on('images-loaded',function(){				if ( !APP.ready )				{					APP.start();				}			});			this.cacheSizes();			enquire.register('(min-width: ' + ( BP.xl ) + 'px)', { match: function () { viewportSize = 'xl'; $(window).trigger('breakpointchange'); }});			enquire.register('(min-width: ' + ( BP.lg ) + 'px) and (max-width: ' + ( BP.xl - 1) + 'px)', { match: function () { viewportSize = 'lg'; $(window).trigger('breakpointchange'); }});			enquire.register('(min-width: ' + ( BP.md ) + 'px) and (max-width: ' + ( BP.lg - 1) + 'px)', { match: function () { viewportSize = 'md'; $(window).trigger('breakpointchange'); }});			enquire.register('(min-width: ' + ( BP.sm ) + 'px) and (max-width: ' + ( BP.md - 1) + 'px)', { match: function () { viewportSize = 'sm'; $(window).trigger('breakpointchange'); }});			enquire.register('(max-width: ' + ( BP.sm - 1) + 'px)', { match: function () { viewportSize = 'xs'; $(window).trigger('breakpointchange'); }});			$(window).on('scroll-start', function()			{				BODY.addClass('scrolling');				lastScrollTop = scrollTop;			});			$(window).on('scroll-end', function()			{				BODY.removeClass('scrolling');				scrollTop = $(window).scrollTop();			});			$(window).on('resize', function()			{				APP.cacheSizes();				/*	REMOVE ggf. 			*/				MAIN.css({minHeight: (h - HEADER.outerHeight() - FOOTER.outerHeight()) + 'px' });				MAIN.find('code.log').text('MAIN [height: ' + h + 'px]');				/* --------------------	*/			}).trigger('resize');			$(window).on('orientationchange', function()			{				APP.cacheSizes();            }).trigger('orientationchange');			$(window).on('breakpointchange',function()			{				// console.log(viewportSize);				BODY.removeClass('xs sm md lg xl').addClass(viewportSize);				// TODO: Test and finish this:				$('[data-original]')					.each(function(i,el)					{						$(el).attr('src',$(el).data('original'));					});				$('[data-' + viewportSize + ']')					.each(function(i,el)					{						if ( !$(el).data().original ) {							var _src = $(el).attr('src');							$(el).attr({'data-original' : _src });						}						$(el).attr('src',$(el).data(viewportSize));					});			}).trigger('breakpointchange');			WS.Images.load(PAGE);         $("select.chosenize").chosen({            width: '100%',            inherit_select_classes: true,            disable_search_threshold: 10         });         /* JQUERY.CHOSEN (autsubmit form on change) */		   if ( $('select.auto-submit').length ) {			   $('select.auto-submit').on('change',               function() {                  $(this)                     .closest('form')						   .submit();               }            );		   }         /* BOOTSTRAP custom-forms -> set checkbox to 'indeterminate' state */         $('.indeterminate-state').prop('indeterminate', true);         WS.QuestionsGroup.init();         // INIT HOOK         // Tell sub-scripts that the show is about to beginn ...			$(window).trigger('application-init',[APP]);		},		start: function() {         // START HOOK			// Tell sub-scripts that the show beginns ...			$(window).trigger('application-start',[APP]);		}	}   /* ============================================================================== */	/* QUESTIONS-GROUP	/*	/* @descr:	Manage Anamnesis Questions Interface	/* @plgin:	bootstrap.js (Button and Collapse plugin)	/* ============================================================================== */   WS.QuestionsGroup = {      SELECTOR_DEFAULT: '.questions-group',      NEXT_TIMER: false,      NEXT_DELAY: 1000, // milliseconds      init: function ( $GROUP ) {         if ($GROUP === undefined || typeof $GROUP !== 'object' ) { $GROUP = $(this.SELECTOR_DEFAULT); }         if ($GROUP.length) {            $('.radio-group').find('.btn').each(function(i, el)            {               var _groupid = $(el).closest('.radio-group').attr('id');               $(el).on('click', function() {                  var _input = $(this).find('input');                  if(_input.prop('checked') === false) {                     $('#'+_groupid).trigger('ws.changed.radio',[_input.val()]);                     WS.QuestionsGroup.showNext( $('#'+_groupid) );                  }               });            });            $('.radio-group').on('ws.changed.radio', function(e, val)            {               if($(this).hasClass('ok')) {                  $(this)                     .find('.card.active-card')                     .removeClass('active-card');               } else {                  $(this)                     .addClass('ok');               }               $('#' + $(this).attr('id') + '_OPT' + val)                  .addClass('active-card');               return true;            });            /* RADIO-GROUP (Accordion Behavior) */            $('.radio-group')               .on('hide.bs.collapse', function (e) {                  // console.log('hide');                  // console.log( e.target.id );                  var _parent = $('#PARENT_' + e.target.id);                  _parent.removeClass('open');               })               .on('hidden.bs.collapse', function (e) {                  // console.log('hidden');                  // console.log( e.target.id );               })               .on('show.bs.collapse', function (e) {                  // console.log('show');                  console.log( 'PARENT_' + e.target.id );                  // console.log( $GROUP.find('.card-group.in') );                  var _target = $GROUP.find('.card-group.in'),                      _parent = $('#PARENT_' + e.target.id);                  if ( _target.length ) {                     _target.collapse('hide');                  }                  _parent.addClass('open');               })               .on('shown.bs.collapse', function (e) {                  // console.log('shown');                  // console.log( e.target.id );               });            WS.QuestionsGroup.showNext();         }      },      showNext: function ( $CURRENT, $GROUP ) {         if ($GROUP === undefined || typeof $GROUP !== 'object' ) { $GROUP = $(this.SELECTOR_DEFAULT); }         if ($GROUP.length) {            var _next = $GROUP.find('.radio-group:not(.ok)').first();            if (_next.length) {               clearTimeout(WS.QuestionsGroup.NEXT_TIMER);		         WS.QuestionsGroup.NEXT_TIMER = setTimeout(function () {			         if ($CURRENT !== undefined) { $CURRENT.collapse('hide'); }                  _next.collapse('show');               }, WS.QuestionsGroup.NEXT_DELAY );            }         }      }   }	/* ============================================================================== */	/* IMAGES	/*	/* @descr:	Manage Imagesloaded events and starts APP when all images are loaded	/* @plgin:	ImagesLoaded.js	/* ============================================================================== */	WS.Images = {		ready: false,		IMAGES: Array(),		ERRORS: Array(),		data: {},		SUFFIX_DEFAULT: '_sw.png',		SUFFIX_HOVER_STATE: '.png',		load: function ($TARGET, options) {			if ($TARGET === undefined) { $TARGET = $BODY; }			options = options || {};			var opt = {					// callbacks					bg: 		options.bg 			      || false,					onAlways:	options.onAlways  	|| null,					onSuccess: 	options.onSuccess  	|| null,					onFail:    	options.onFail		   || null,					onProgress:	options.onProgress	|| null				};			$.extend( opt, options );			/**	 		 * This manages the callback functions	 		 */			var _events = $.Callbacks(),				_dispatch = function ( fn, params, string ) {					if ( typeof fn === 'function' ) {						_events							.add(fn)							.fire( params, string )							.remove(fn);					}				};			var _that = this;			this.imagesReady = false;			$('img.hidden').removeClass('hidden');			/* load all images and then start application */			$TARGET.imagesLoaded({background: opt.bg}				).always (					function(obj)					{						_that.always(obj);						_dispatch( opt.onAlways,obj);					}				).done (					function(obj)						{							_that.success(obj);							_dispatch( opt.onSucess,obj);						}				).fail (					function(obj)						{							_that.fail(obj);							_dispatch( opt.onFail,obj);						}				).progress (					function(obj,image)						{							_that.progress(obj,image);							_dispatch( opt.onProgress,obj);						}				);		},		always: function(data) {			$(window).trigger('images-loaded',data);			this.ready = true;			this.data = data;		},		success: function(data) {			$(window).trigger('images-success',data);		},		fail: function(data) {			$(window).trigger('images-fail',data);			console.log('WARNING: ' + this.ERRORS.length + ' images are broken or missing:');			if ( this.ERRORS.length ) {				var _missing = {};				for (var i = 0; i < this.ERRORS.length; i++) {					_missing[(i+1)] = this.ERRORS[i].img.src;				}				console.log(_missing);			}		},		progress: function(data,image) {			if (!image.isLoaded) //	mend broken images			{				//	remove 'ready' state				$(image.img)					.removeClass('ready')					.parent()					.removeClass('ready');				if ($(image.img).hasClass('generated'))				{					$(image.img).remove(); // throw out if broken image was dynamically generated ...				} else				{					$(image.img).addClass('hidden'); // ... or hide				}				// collect broken images				this.ERRORS.push(image);			} else			{	// collect good images				this.IMAGES.push(image);			}		}	};	/* ============================================================================== */	/*	EVENT HELPER	/*	/*	Generic, efficient window resize and scroll handler	/*	Using 'setTimeout' since Web-Kit and some other browsers call the resize	/*	function constantly upon window resizing.	/* ============================================================================== */	var resizeTimer;	$(window).resize(function (e) {		clearTimeout(resizeTimer);		resizeTimer = setTimeout(function () {			$(window).trigger('delayed-resize',e);		}, 250);	});	var scrollTimer,	 	scrolling = false;	$(window).on('scroll', function(e){		if (!scrolling) {			scrolling = true;			$(window).trigger('scroll-start',e);		}		clearTimeout(scrollTimer);		scrollTimer = setTimeout(function(e){			$(window).trigger('scroll-end',e);			scrolling = false;		}, 100);	});	$(window).load(function(){		APP.init();	});}); //on.ready ENDE/* HELPER----------------------------------------------------------------------------------------------------*//** @public **/function validateEmail(email) {	var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;	return re.test(email);}/** @public **/function nl2br(str, is_xhtml) {  //   example 1: nl2br('Kevin\nvan\nZonneveld');  //   returns 1: 'Kevin<br />\nvan<br />\nZonneveld'  //   example 2: nl2br("\nOne\nTwo\n\nThree\n", false);  //   returns 2: '<br>\nOne<br>\nTwo<br>\n<br>\nThree<br>\n'  //   example 3: nl2br("\nOne\nTwo\n\nThree\n", true);  //   returns 3: '<br />\nOne<br />\nTwo<br />\n<br />\nThree<br />\n'  var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br ' + '/>' : '<br>'; // Adjust comment to avoid issue on phpjs.org display  return (str + '')    .replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + breakTag + '$2');}/** @public **/function openURL ( url, target ) {	target = target || '_blank';	window.open(url,target);}